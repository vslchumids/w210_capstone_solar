# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
ca_zips <- zip_codes[zip_codes$state=="OR",]
subdat<-dat[dat$GEOID10 %in% ca_zips2$Zip.Code,]
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
labels <- sprintf(
"<strong>%s",
subdat$GEOID10
) %>% lapply(htmltools::HTML)
leaflet() %>%
addTiles() %>%
addPolygons(data=subdat,
weight = .5,
highlightOptions = highlightOptions(color = "red", weight = 2,bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),textsize = "15px",direction = "auto"))
subdat$GEOID10
library(shiny); runApp('Documents/GitHub/w210_capstone_solar/UI/Shiny_UI/SolaRiseApp.R')
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
setwd('C:/Users/eyang/Desktop/shiny')
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/shiny')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#head(zip_codes)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#ca_zips <- zip_codes[zip_codes$state=="CA",]
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
subdat
subdat <-spTransform(subdat)
subdat <-spTransform(subdat, CRS("+init=epsg:4326"))
subdat <-spTransform(subdat, CRS("+init=epsg:4327"))
subdat <-spTransform(subdat, CRS("+init=epsg:4326"))
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/shiny')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#head(zip_codes)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#ca_zips <- zip_codes[zip_codes$state=="CA",]
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
#subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/shiny')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#head(zip_codes)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#ca_zips <- zip_codes[zip_codes$state=="CA",]
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
#subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
#subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
#-----merge in density data
subdat <- merge(x = subdat, y = zip_codes, by = "GEOID10", all.x = TRUE)
subdat$GEOID10
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/shiny')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#head(zip_codes)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#ca_zips <- zip_codes[zip_codes$state=="CA",]
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
#subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
#subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
#-----merge in density data
#subdat <- merge(x = subdat, y = zip_codes, by = "GEOID10", all.x = TRUE)
#------Add Labels
labels <- sprintf(
"<strong>%s",
subdat$GEOID10
) %>% lapply(htmltools::HTML)
#------Setup Density Buckets
bins <- c(0.001, .01, .02, .05, .1, .2, .5, 1, Inf)
pal <- colorBin("YlOrRd", domain = subdat$Density, bins = bins)
#-------Final Visualization
leaflet() %>%
addTiles() %>%
addPolygons(data=subdat,
fillColor = ~pal(subdat$Density),
fillOpacity = 0.45,
weight = .5,
highlightOptions = highlightOptions(color = "red", weight = 2,bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),textsize = "15px",direction = "auto"))
summary(subdat)
```{r}
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/shiny')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#head(zip_codes)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#ca_zips <- zip_codes[zip_codes$state=="CA",]
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
spTransform(subdat, CRS("+init=epsg:4326"))
proj4string(subdat) <- CRS("+init=epsg:4326")
#spTransform(subdat, CRS("+init=epsg:4326"))
summary(subdat)
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/shiny')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#head(zip_codes)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#ca_zips <- zip_codes[zip_codes$state=="CA",]
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
#subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
proj4string(subdat) <- CRS("+init=epsg:4326")
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
summary(subdat)
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/shiny')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#head(zip_codes)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#ca_zips <- zip_codes[zip_codes$state=="CA",]
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
#subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
proj4string(subdat) <- CRS("+init=epsg:4326")
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
#subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
#-----merge in density data
subdat <- merge(x = subdat, y = zip_codes, by = "GEOID10", all.x = TRUE)
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/shiny')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#head(zip_codes)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
#ca_zips <- zip_codes[zip_codes$state=="CA",]
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
#subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
proj4string(subdat) <- CRS("+init=epsg:4326")
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
#subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
#-----merge in density data
#subdat <- merge(x = subdat, y = zip_codes, by = "GEOID10", all.x = TRUE)
#------Add Labels
labels <- sprintf(
"<strong>%s",
subdat$GEOID10
) %>% lapply(htmltools::HTML)
#------Setup Density Buckets
bins <- c(0.001, .01, .02, .05, .1, .2, .5, 1, Inf)
pal <- colorBin("YlOrRd", domain = subdat$Density, bins = bins)
#-------Final Visualization
leaflet() %>%
addTiles() %>%
addPolygons(data=subdat,
fillColor = ~pal(subdat$Density),
fillOpacity = 0.45,
weight = .5,
highlightOptions = highlightOptions(color = "red", weight = 2,bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),textsize = "15px",direction = "auto"))
library(noncensus)
library(noncensus)
zip_codes
library(noncensus)
data(zip_codes)
library(noncensus)
zip_codes <- data(zip_codes)
library(noncensus)
zip_codes <- data(zip_codes)
head(zip_codes)
library(noncensus)
zip_codes <- data(zipcodes)
head(zipcodes)
library(noncensus)
zip_codes <- get(zip_codes)
library(noncensus)
zip_codes <- data("zip_codes"")
head(zip_codes)
library(noncensus)
zip_codes <- data("zip_codes")
head(zip_codes)
library(noncensus)
zip_codes <- data("zip_codes")
zip_codes
library(noncensus)
zip_codes <- data("zip_codes")
zip_codes
library(noncensus)
zip_codes <- data.frame("zip_codes")
zip_codes
library(noncensus)
zip_codes <- data.frame(zip_codes)
zip_codes
library(noncensus)
zip_codes <- data(zip_codes)
zip_codes$zip
library(noncensus)
zip_codes <- data.frame(zip_codes)
zip_codes$zip
library(noncensus)
zip_codes <- data.frame(zip_codes)
zip_codes$city
library(noncensus)
zip_codes <- data.frame(zip_codes)
zip_codes$state
library(noncensus)
ca_zips <- zip_codes[zip_codes$state=="CA",]
library(noncensus)
ca_zips <- zip_codes[zip_codes$state=="CA",]
ca_zips
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
#dat<-readOGR(downloaddir, "County_2010Census_DP1")
# ----- Create a subset of New York counties
#subdat<-dat[substring(dat$GEOID10, 1, 2) == "36",]
ca_zips <- zip_codes[zip_codes$state=="OR",]
subdat<-dat[dat$GEOID10 %in% ca_zips2$Zip.Code,]
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
dat<-readOGR(downloaddir, "County_2010Census_DP1")
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
dat<-readOGR(downloaddir, "County_2010Census_DP1")
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
downloaddir<-getwd()
#library(noncensus)
#https://stackoverflow.com/questions/33176378/mapping-zip-code-vs-county-shapefile-in-r
dat<-readOGR(downloaddir, "County_2010Census_DP1")
library(shiny); runApp('Google Drive/Shiny/SolaRiseApp_2.R')
install.packages("ggmap")
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny_PC_old/063-superzip-example')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny_PC_old/063-superzip-example')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny_PC_old/063-superzip-example')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
geocode(input$Address, output='latlon', source = "dsk")
linrary(ggmap())
geocode("90046", output='latlon', source = "dsk")
linrary(ggmap())
points <- geocode("90046", output='latlon', source = "dsk")
library(ggmap())
points <- geocode("90046", output='latlon', source = "dsk")
points$lon
library(ggmap())
points <- geocode("90046", output='latlon', source = "dsk")
points[0]
library(ggmap())
points <- geocode("90046", output='latlon', source = "dsk")
points[,0]
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
library(ggmap())
points <- geocode("90046", output='latlon', source = "dsk")
points
library(ggmap())
points <- geocode("90046", output='latlon', source = "dsk")
points[1,]
library(ggmap())
points <- geocode("90046", output='latlon', source = "dsk")
points[1,1]
library(ggmap())
points <- geocode("90046", output='latlon', source = "dsk")
points[,1]
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
runApp('Google Drive/Shiny/SolaRiseApp_2.R')
library(shiny); runApp('Google Drive/Shiny/SolaRiseApp_2.R')
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
library(shiny)
library(ggplot2)
library(ggmap)
data("zip_codes")
zip_codes[zip_codes$state == 'CA',]
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/Shiny_PC')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#Remove this when we can just use non_census
zip_codes = read.csv('ca_zips.csv')
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
#subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
proj4string(subdat) <- CRS("+init=epsg:4326")
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
#-----merge in density data
subdat <- merge(x = subdat, y = zip_codes, by = "GEOID10", all.x = TRUE)
saveRDS(subdat, "subdat.rds")
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
library(shiny)
library(ggplot2)
library(ggmap)
data("zip_codes")
zip_codes[zip_codes$state == 'CA',]
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/Shiny_PC')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
runApp('Documents/GitHub/w210_capstone_solar/UI/Shiny_UI/SolaRiseApp_2.R')
downloaddir<-getwd()
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/Shiny_PC')
#dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/Shiny_PC')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/Shiny_PC')
zip_codes = read.csv('ca_zips.csv')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
library(shiny)
library(ggplot2)
library(ggmap)
data("zip_codes")
zip_codes[zip_codes$state == 'CA',]
downloaddir<-getwd()
#setwd('C:/Users/eyang/Desktop/Shiny_PC')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
downloaddir<-getwd()
downloaddir
downloaddir<setwd('/Users/ericyang/documents/github/w210_capstone_solar/UI/Shiny_UI')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
downloaddir<-setwd('/Users/ericyang/documents/github/w210_capstone_solar/UI/Shiny_UI')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
library(rgdal)
library(rgeos)
library(leaflet)
library(noncensus)
library(shiny)
library(ggplot2)
library(ggmap)
data("zip_codes")
zip_codes[zip_codes$state == 'CA',]
#downloaddir<-getwd()
downloaddir<-setwd('/Users/ericyang/documents/github/w210_capstone_solar/UI/Shiny_UI')
dat<-readOGR(downloaddir, "cb_2016_us_zcta510_500k")
#Remove this when we can just use non_census
zip_codes = read.csv('ca_zips.csv')
subdat<-dat[dat$GEOID10 %in% zip_codes$GEOID10,]
# ----- Transform to EPSG 4326 - WGS84 (required)
#subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
proj4string(subdat) <- CRS("+init=epsg:4326")
# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "ALAND10")]
# ----- simplification yields a SpatialPolygons class
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
#-----merge in density data
subdat <- merge(x = subdat, y = zip_codes, by = "GEOID10", all.x = TRUE)
saveRDS(subdat, "subdat.rds")
runApp('SolaRiseApp_2.R')
runApp('SolaRiseApp_2.R')
runApp('SolaRiseApp_2.R')
runApp('SolaRiseApp_2.R')
